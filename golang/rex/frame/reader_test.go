package frame

import (
	"bytes"
	"reflect"
	"testing"
)

func TestReader_ReadInto(t *testing.T) {
	input := bytes.NewReader([]byte{
		//  0-byte frame, chn=0, fin=1:
		0x80,
		//  0-byte frame, chn=1, fin=1:
		0xC0,
		//  1-byte frame, chn=0, fin=1:
		0x81, 0x55,
		//  1-byte frame, chn=1, fin=1:
		0xC1, 0x55,
		// 63-byte frame, chn=0, fin=1:
		0xBF,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
		// 63-byte frame, chn=1, fin=1:
		0xFF,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
		// 63-byte frame, chn=0, fin=0:
		0x3F,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
		//  1-byte frame, chn=0, fin=1:
		0x81,
		0x3f,
		// 61-byte frame, chn=0, fin=0:
		0x3d,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
		// 63-byte frame, chn=0, fin=1:
		0xbf,
		0x3d, 0x3e, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
		0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
		0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d,
		0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
	})

	type test struct {
		name     string
		wantErr  bool
		wantOk   bool
		wantFin  bool
		wantChn  uint8
		wantData []byte
	}
	tests := []test{
		{
			name:     " 0-byte frame chn=0, fin=1",
			wantErr:  false,
			wantOk:   true,
			wantFin:  true,
			wantChn:  0,
			wantData: []byte{},
		},
		{
			name:     " 0-byte frame chn=1, fin=1",
			wantErr:  false,
			wantOk:   true,
			wantFin:  true,
			wantChn:  1,
			wantData: []byte{},
		},
		{
			name:     " 1-byte frame chn=0, fin=1",
			wantErr:  false,
			wantOk:   true,
			wantFin:  true,
			wantChn:  0,
			wantData: []byte{0x55},
		},
		{
			name:     " 1-byte frame chn=1, fin=1",
			wantErr:  false,
			wantOk:   true,
			wantFin:  true,
			wantChn:  1,
			wantData: []byte{0x55},
		},
		{
			name:    "63-byte frame chn=0, fin=1",
			wantErr: false,
			wantOk:  true,
			wantFin: true,
			wantChn: 0,
			wantData: []byte{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
			},
		},
		{
			name:    "63-byte frame chn=1, fin=1",
			wantErr: false,
			wantOk:  true,
			wantFin: true,
			wantChn: 1,
			wantData: []byte{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
			},
		},
		{
			name:    "63-byte frame chn=0, fin=0",
			wantErr: false,
			wantOk:  true,
			wantFin: false,
			wantChn: 0,
			wantData: []byte{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
			},
		},
		{
			name:     " 1-byte frame chn=0, fin=1",
			wantErr:  false,
			wantOk:   true,
			wantFin:  true,
			wantChn:  0,
			wantData: []byte{0x3f},
		},
		{
			name:    "61-byte frame chn=0, fin=0",
			wantErr: false,
			wantOk:  true,
			wantFin: false,
			wantChn: 0,
			wantData: []byte{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
			},
		},
		{
			name:    "63-byte frame chn=0, fin=0",
			wantErr: false,
			wantOk:  true,
			wantFin: true,
			wantChn: 0,
			wantData: []byte{
				0x3d, 0x3e, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
				0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
				0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d,
				0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
			},
		},
		{
			name:     "ends in EOF",
			wantErr:  true,
			wantOk:   false,
			wantFin:  false,
			wantChn:  0,
			wantData: []byte{},
		},
	}

	r := NewReader(input)
	var f F
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotOk, err := r.ReadInto(&f)
			if (err != nil) != tt.wantErr {
				t.Errorf("ReadInto() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if gotOk != tt.wantOk {
				t.Errorf("ReadInto() gotOk = %v, want %v", gotOk, tt.wantOk)
			}
			if gotOk {
				if gotFin := f.IsFinal(); gotFin != tt.wantFin {
					t.Errorf("ReadInto() gotFin = %v, want %v", gotFin, tt.wantFin)
				}
				if gotChn := f.Channel(); gotChn != tt.wantChn {
					t.Errorf("ReadInto() gotChn = %v, want %v", gotChn, tt.wantChn)
				}
				if gotData := f.Data(); !reflect.DeepEqual(gotData, tt.wantData) {
					t.Errorf("ReadInto() gotData = %v, want %v", gotData, tt.wantData)
				}
			}
		})
	}
}
